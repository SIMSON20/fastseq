# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/07_interpret.ipynb (unless otherwise specified).

__all__ = ['add_stack']

# Cell
from .all import *
from .data.external import *
from fastai2.basics import *
from .models.nbeats import *

# Cell
def add_stack(b):
    res = {}
    for stack in set([o[:-4] for o in b.keys()]):
        for direction in ['f','b']:
            for key in b.keys():
                if stack in key and direction == key[-1]:
                    if stack+'_'+direction in res:
                        res[stack+'_'+direction] += b[key]
                    else:
                        res[stack+'_'+direction] = b[key]
    return res



# Cell
@typedispatch
def plot_top_losses(x:TSTensorSeq, y:TSTensorSeqy, *args, b={}, f={}, total_b=None, combine_stack=True,
                    rows=None, cols=None, figsize=None, **kwargs):

    figsize = (2*3, x.shape[0]*3+0) if figsize is None else figsize
    _, axs = plt.subplots(x.shape[0], 2, figsize=figsize, sharey='row')
    axs = axs.flatten()
    normal = np.arange(0,x.shape[0]*2,2)
    if combine_stack:
        b = add_stack(b)
        f = add_stack(f)
    for i, (_x, _y, pred, t) in enumerate(zip(x, y, args[2], args[3])):
        ax = axs[i*2]
        ctx = show_graph(_x, ax=ax, title=str(t.data))
        a = [TSTensorSeqy(_y, x_len = x.shape[-1], m = '-g'), TSTensorSeqy(pred,x_len = x.shape[-1], m = '-*r')]
        if 'total_b' is not None:
            ctx = TSTensorSeqy(-total_b[i,:], m = '-*r',label='y_backwards').show(ctx=ctx)
        for y in a:
            ctx = y.show(ctx=ctx)
        ax = axs[i*2 + 1]
        total = torch.zeros_like(b[list(b.keys())[0]][i,:])
        for k_f, k_b, c in zip(f.keys(),b.keys(), ['y','k','g','r','b','b','b','b']):
            ax = TSTensorSeqy(f[k_f][i,:],x_len = x.shape[-1], m = '-*'+c, label = k_f).show(ctx=ax)
            ax = TSTensorSeqy(b[k_b][i,:], m = '-*'+c, label= k_b).show(ctx=ax)
            total += b[k_b][i,:]

#         ax = TSTensorSeqy(total, m = '-*y', label= 'tot').show(ctx=axs[i*2])
        ax.legend(bbox_to_anchor=(1.3, 1.05))

