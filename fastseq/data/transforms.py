# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/04_data.transforms.ipynb (unless otherwise specified).

__all__ = ['encodes', 'decodes', 'SampleNorm']

# Cell
from fastai2.torch_basics import *
from fastai2.data.all import *
# from pyts.image import GramianAngularField, MarkovTransitionField, RecurrencePlot

# Cell
@ToTensor
def encodes(self,o):
    return tensor(o).float()
@ToTensor
def decodes(self,o)->np.ndarray:
    return np.array(o)

# Cell
from ..core import *

class SampleNorm(Transform):
    def __init__(self, mean=None, std=None, axes=(0,2,3)): self.mean,self.std,self.axes = mean,std,axes

    def encodes(self, o):
        print('encodes',o[0])
        m, s = o[0].mean(-1,keepdim = True), o[0].std(-1,keepdim = True)
        return (o[0] - m)/(o[0] + 1e-8),(o[1] - m)/(o[1] + 1e-8)